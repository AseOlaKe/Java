package ligaFutbol;
/*
 * Interfaz
 * 
 * Propiedades básicas:
 * 
 * -equipoLocal, Equipo consultable
 * -equipoVisitante, Equipo consultable
 * -GolesLocal, Entero consultable y modificable
 * -GolesVisitante, Entero consultable
 * 
 * Propiedades derivadas:
 * - No hay
 * Propiedades compartidas:
 * - No hay
 * 
 * Métodos consultores y modificadores:
 * 
 * String getNombreLocal()
 * 
 * String getEquipoVisitante()
 * 
 * int getGolesLocal()
 * void setGolesLocal(int golesLocal)
 * 
 * int getGolesVisitante()
 * void setGolesVisitante(int golesvisitante)
 * 
 * Métodos añadidos:
 * 
 *
 * 
 */

import java.util.Objects;

public class Partido {
	
	private Equipo equipoLocal;
	private Equipo equipoVisitante;
	private int golesLocal;
	private int golesVisitante;
	
	//Constructores
	//Vacío
	public Partido() 
	{
		
		equipoLocal=new Equipo();
		equipoVisitante=new Equipo();
		golesLocal=0;
		golesVisitante=0;
	}
	//Por parámetros
	public Partido(Equipo equipoLocal, Equipo equipoVisitante, int golesLocal, int golesVisitante)
	{
		this.equipoLocal=equipoLocal;
		this.equipoVisitante=equipoVisitante;
		this.golesLocal=golesLocal;
		this.golesVisitante=golesVisitante;
	}
	//De copia
	public Partido(Partido partido)
	{
		this.equipoLocal=partido.equipoLocal;
		this.equipoVisitante=partido.equipoVisitante;
		this.golesLocal=partido.golesLocal;
		this.golesVisitante=partido.golesVisitante;
	}
	//Métodos consultores y modificadores
	public Equipo getEquipoLocal() 
	{
		return equipoLocal;
	}
	public Equipo getEquipoVisitante() 
	{
		return equipoVisitante;
	}
	public int getGolesLocal() 
	{
		return golesLocal;
	}
	public void setGolesLocal(int golesLocal) 
	{
		this.golesLocal = golesLocal;
	}
	public int getGolesVisitante() 
	{
		return golesVisitante;
	}
	public void setGolesVisitante(int golesVisitante) 
	{
		this.golesVisitante = golesVisitante;
	}
	//Métodos sobrecargados y sobreescritos
	@Override
	public String toString() 
	{
		return equipoLocal + ", " + equipoVisitante + ", "
				+ golesLocal + ", " + golesVisitante;
	}
	@Override
	public int hashCode() 
	{
		return Objects.hash(equipoLocal,equipoVisitante,golesLocal,golesVisitante);
	}
	//Criterio de igualdad: Si los equipos son iguales, el partido es el mismo
	@Override
	public boolean equals(Object x) 
	{
		boolean igual=false;
		if(x!=null && x instanceof Partido)
		{
			Partido partido=(Partido)x;
			if(this.equipoLocal==partido.equipoLocal&&this.equipoVisitante==partido.equipoVisitante)
			{
				igual=true;
			}
		}
		return igual;
	}
	public int compareTo(Partido partido)
	{
		int compara=0;
		if(((this.golesLocal>partido.golesLocal)&&(this.golesLocal>this.golesVisitante))||((this.golesVisitante>partido.golesVisitante)&&(this.golesVisitante>this.golesLocal)))
		{
			compara=1;
		}
		else if(((this.golesLocal<partido.golesLocal)&&(partido.golesLocal>partido.golesVisitante))||((this.golesVisitante<partido.golesVisitante)&&(partido.golesVisitante>partido.golesLocal)))
		{
			compara=-1;
		}
		return compara;
	}
	@Override
	public Partido clone()
	{
		Partido copia=null;
		try
		{
			copia=(Partido)super.clone();
		}catch(CloneNotSupportedException error)
		{
			System.out.println("No se ha podido clonar");
		}
		return copia;
	}
	
	

}
